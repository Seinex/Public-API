import BaseHTTPServer
import Cookie
import httplib2
import StringIO
import urlparse
import sys

from apiclient.discovery import build
from oauth2client.client import AccessTokenRefreshError
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.file import Storage

class RequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
  """Child class of BaseHTTPRequestHandler that only handles GET request."""

  
  flow = OAuth2WebServerFlow(sys.argv[1],
                             sys.argv[2],
                             'https://www.googleapis.com/auth/calendar',
                             redirect_uri='http://localhost:8080/')

  def do_GET(self):
    """Handler for GET request."""
    print '\nNEW REQUEST, Path: %s' % (self.path)
    print 'Headers: %s' % self.headers

   
      self.handle_initial_url()

    elif self.path.startswith('/?code='):
     
      self.handle_redirected_url()
    
    else:
      
      self.respond_ignore()

  def handle_initial_url(self):
    """Handles the initial path."""
    
    fake_user = self.get_fake_user_from_url_param()

    
    credentials = self.get_credentials(fake_user)

    
    if credentials is None or credentials.invalid:
     
      self.respond_redirect_to_auth_server(fake_user)
    else:
      try:
       
        calendar_output = self.get_calendar_data(credentials)

        
        self.respond_calendar_data(calendar_output)
      except AccessTokenRefreshError:
       
        self.respond_redirect_to_auth_server(fake_user)

  def handle_redirected_url(self):
    """Handles the redirection back from the authorization server."""
    
    code = self.get_code_from_url_param()

   
    fake_user = self.get_fake_user_from_cookie()

   
    credentials = RequestHandler.flow.step2_exchange(code)

   
    self.save_credentials(fake_user, credentials)

    
    calendar_output = self.get_calendar_data(credentials)

    
    self.respond_calendar_data(calendar_output)

  def respond_redirect_to_auth_server(self, fake_user):
    """Respond to the current request by redirecting to the auth server."""
   
  
    uri = RequestHandler.flow.step1_get_authorize_url()

   
    print 'Redirecting %s to %s' % (fake_user, uri)
    self.send_response(301)
    self.send_header('Cache-Control', 'no-cache')
    self.send_header('Location', uri)
    self.send_header('Set-Cookie', 'fake_user=%s' % fake_user)
    self.end_headers()

  def respond_ignore(self):
    """Responds to the current request that has an unknown path."""
    self.send_response(200)
    self.send_header('Content-type', 'text/plain')
    self.send_header('Cache-Control', 'no-cache')
    self.end_headers()
    self.wfile.write(
      'This path is invalid or user denied access:\n%s\n\n' % self.path)
    self.wfile.write(
      'User entered URL should look like: http://localhost:8080/?fake_user=johndoe')

  def respond_calendar_data(self, calendar_output):
    """Responds to the current request by writing calendar data to stream."""
    self.send_response(200)
    self.send_header('Content-type', 'text/plain')
    self.send_header('Cache-Control', 'no-cache')
    self.end_headers()
    self.wfile.write(calendar_output)

  def get_calendar_data(self, credentials):
    """Given the credentials, returns calendar data."""
    output = StringIO.StringIO()

   
    http = httplib2.Http()
    http = credentials.authorize(http)

   
    service = build('calendar', 'v3', http=http)

   
    request = service.events().list(calendarId='primary')
   
    while request != None:
      
      response = request.execute()
      
      for event in response.get('items', []):
        
        output.write(repr(event.get('summary', 'NO SUMMARY')) + '\n')
      
      request = service.events().list_next(request, response)

    
    return output.getvalue()

  def get_credentials(self, fake_user):
    """Using the fake user name as a key, retrieve the credentials."""
    storage = Storage('credentials-%s.dat' % (fake_user))
    return storage.get()

  def save_credentials(self, fake_user, credentials):
    """Using the fake user name as a key, save the credentials."""
    storage = Storage('credentials-%s.dat' % (fake_user))
    storage.put(credentials)

  def get_fake_user_from_url_param(self):
    """Get the fake_user query parameter from the current request."""
    parsed = urlparse.urlparse(self.path)
    fake_user = urlparse.parse_qs(parsed.query)['fake_user'][0]
    print 'Fake user from URL: %s' % fake_user
    return fake_user

  def get_fake_user_from_cookie(self):
    """Get the fake_user from cookies."""
    cookies = Cookie.SimpleCookie()
    cookies.load(self.headers.get('Cookie'))
    fake_user = cookies['fake_user'].value
    print 'Fake user from cookie: %s' % fake_user
    return fake_user

  def get_code_from_url_param(self):
    """Get the code query parameter from the current request."""
    parsed = urlparse.urlparse(self.path)
    code = urlparse.parse_qs(parsed.query)['code'][0]
    print 'Code from URL: %s' % code
    return code

def main():
  try:
    server = BaseHTTPServer.HTTPServer(('', 8080), RequestHandler)
    print 'Starting server. Use Control+C to stop.'
    server.serve_forever()
  except KeyboardInterrupt:
    print 'Shutting down server.'
    server.socket.close()

if __name__ == '__main__':
  main()
